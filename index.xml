<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>振振的博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 振振的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>http://localhost:1313/post/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 04 May 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      
        <description>&lt;h1 id=&#34;什么是表达式和语句&#34;&gt;什么是表达式和语句&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;1+2的表达式的值为3&lt;/li&gt;
&lt;li&gt;add(1,2)的表达式值为函数返回值&lt;/li&gt;
&lt;li&gt;console.log表达式的值为函数本身&lt;/li&gt;
&lt;li&gt;console.log(3)表达式的值为多少呢？ undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语句&#34;&gt;语句&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;var a = 1 是一个语句&lt;/li&gt;
&lt;li&gt;二者的区别&lt;/li&gt;
&lt;li&gt;表达式一般都有值,语句可能有也可能没有&lt;/li&gt;
&lt;li&gt;语句一般会改变环境(声明 赋值)&lt;/li&gt;
&lt;li&gt;上面两句话并不是绝对的&lt;/li&gt;
&lt;li&gt;大小写敏感 不要写错&lt;/li&gt;
&lt;li&gt;var a和var A是不同的&lt;/li&gt;
&lt;li&gt;object 和Object 是不同的&lt;/li&gt;
&lt;li&gt;function和Function是不同的&lt;/li&gt;
&lt;li&gt;空格&lt;/li&gt;
&lt;li&gt;大部分的空格没有实际意义&lt;/li&gt;
&lt;li&gt;var a = 1 和var a=1 没有区别&lt;/li&gt;
&lt;li&gt;加回车大部分时候也不影响&lt;/li&gt;
&lt;li&gt;只有一个地方不能加回车 那就是return后面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;标识符&#34;&gt;标识符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;规则&lt;/li&gt;
&lt;li&gt;第一个字符，可以是Unicode字母或$ 或者_或者中文 后面的字符 除了上面说还可以有数字&lt;/li&gt;
&lt;li&gt;变量名是标识符&lt;/li&gt;
&lt;li&gt;var_ = 1&lt;/li&gt;
&lt;li&gt;var $ = 2&lt;/li&gt;
&lt;li&gt;var ______=6&lt;/li&gt;
&lt;li&gt;var 你好 = &amp;lsquo;hi&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区块block&#34;&gt;区块block&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把代码包在一起&lt;/li&gt;
&lt;li&gt;{let a = 1  let b = 2}&lt;/li&gt;
&lt;li&gt;常常与if / fou /while 合用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;if-语句--如果-那么&#34;&gt;if 语句  如果 。。那么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;if 语句&lt;/li&gt;
&lt;li&gt;if(表达式){语句1}else{语句2}&lt;/li&gt;
&lt;li&gt;{}在语句只有一句的时候可以省略， 不建议这样做&lt;/li&gt;
&lt;li&gt;变态情况&lt;/li&gt;
&lt;li&gt;表达式里可以非常变态， 如a = 1&lt;/li&gt;
&lt;li&gt;语句 1 和 2 可以非常变态 如嵌套if else&lt;/li&gt;
&lt;li&gt;a = 1 if( a === 2) console.log(&amp;lsquo;a&amp;rsquo;)  console.log (&amp;lsquo;a等于2&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;常用写法
&lt;code&gt;if (表达式){语句} else if (表达式){语句}else{语句}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;次用语句 &lt;code&gt;function fn(){if(表达式){return 表达式}  if (表达式){return 表达式} return 表达式 }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;switch-语句--if-else-升级版&#34;&gt;switch 语句  if else 升级版&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;switch (fruit){case &amp;ldquo;banana&amp;rdquo;&amp;hellip; break;  case &amp;ldquo;apple&amp;rdquo;:&amp;hellip;break; default: &amp;hellip;}&lt;/li&gt;
&lt;li&gt;break 大部分时候 省略break 你就完了 少不部分时候，可以利用break&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;问号冒号表达式&#34;&gt;问号冒号表达式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;表达式1？表达式2：表达式3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;while-循环-当时&#34;&gt;while 循环 当。。。时&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;while(表达式){语句}&lt;/li&gt;
&lt;li&gt;判断表达式的真假&lt;/li&gt;
&lt;li&gt;当表达式为真， 执行语句 执行完在判断表达式的真假&lt;/li&gt;
&lt;li&gt;当表达式为假 执行后面的语句&lt;/li&gt;
&lt;li&gt;其他 do 。。while&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法糖&#34;&gt;语法糖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;for是while循环的方便写法&lt;/li&gt;
&lt;li&gt;for(语句；表达式2；语句3){循环体}&lt;/li&gt;
&lt;li&gt;先执行语句1&lt;/li&gt;
&lt;li&gt;然后执行表达式2&lt;/li&gt;
&lt;li&gt;如果为真 ，执行循环体 然后执行语句3&lt;/li&gt;
&lt;li&gt;如果为假 直接退出循环 执行后面的语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;break-和continue&#34;&gt;break 和continue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;退出所有的循环 退出当前的一次循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;label-语句&#34;&gt;label 语句&lt;/h3&gt;
&lt;p&gt;&lt;code&gt; foo: {console.log(1) break foo; console.log(&#39;本行不会输出&#39;)}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;{ foo: 1} 是什么呢 是一个标签 值为1&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>js</title>
      <link>http://localhost:1313/post/javascript/</link>
      <pubDate>Fri, 01 May 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/javascript/</guid>
      
        <description>&lt;h1 id=&#34;javascript的总结&#34;&gt;javascript的总结&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;js是布兰登在1995年5月仅花了10天的时间把原型设计出来 最初命名为Mocha,网景公司为了让这门语言搭上java的热度改为javascript命名 这也是成为大众这门语言的诸多误解.&lt;/li&gt;
&lt;li&gt;javasceipt的基本特点如下&lt;/li&gt;
&lt;li&gt;是一种解析型脚本语言(代码不进行预諞译)&lt;/li&gt;
&lt;li&gt;主要用来HTML页面添加交互行为&lt;/li&gt;
&lt;li&gt;可以直接嵌入HTML页面,但写错单独js文件有利于解构和行为的分离&lt;/li&gt;
&lt;li&gt;javascript常用来完成以下任务&lt;/li&gt;
&lt;li&gt;嵌入动态文本于HTML页面&lt;/li&gt;
&lt;li&gt;对浏览器事件作出响应&lt;/li&gt;
&lt;li&gt;读写HTML元素&lt;/li&gt;
&lt;li&gt;在数据被提交到服务器之前验证数据&lt;/li&gt;
&lt;li&gt;检测访客的浏览器信息&lt;/li&gt;
&lt;li&gt;控制cookies，包括创建和修改等&lt;/li&gt;
&lt;li&gt;特性&lt;/li&gt;
&lt;li&gt;不同于服务器端脚本语言，例如PHP与ASP，JavaScript主要被作为客户端脚本语言在用户的浏览器上运行，不需要服务器的支持。所以在早期程序员比较青睐于JavaScript以减少对服务器的负担，而与此同时也带来另一个问题：安全性。而随着服务器变得强大，现在的程序员更喜欢运行于服务端的脚本以保证安全，但JavaScript仍然以其跨平台、容易上手等优势大行其道。同时，有些特殊功能（如AJAX）必须依赖JavaScript在客户端进行支持。随着引擎如V8和框架如Node.js的发展，及其事件驱动及异步IO等特性，JavaScript逐渐被用来编写服务器端程序。且在近几年中，Node.js的出世，让JavaScript也具有了一定的服务器功能，且在某些方面比PHP的效果更为显著。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javascript的10个设计缺陷&#34;&gt;Javascript的10个设计缺陷&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;不适合开发大型程序&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Javascript没有名称空间（namespace），很难模块化；没有如何将代码分布在多个文件的规范；允许同名函数的重复定义，后面的定义可以覆盖前面的定义，很不利于模块化加载&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;非常小的标准库&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Javascript提供的标准函数库非常小，只能完成一些基本操作，很多功能都不具备。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;null和undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;null属于对象（object）的一种，意思是该对象为空；undefined则是一种数据类型，表示未定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;typeof null; // object&lt;/code&gt;
&lt;code&gt;typeof undefined; // undefined&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;两者非常容易混淆，但是含义完全不同。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var foo;&lt;/code&gt;
&lt;code&gt;alert(foo == null); // true&lt;/code&gt;
&lt;code&gt;alert(foo == undefined); // true&lt;/code&gt;
&lt;code&gt;alert(foo === null); // false&lt;/code&gt;
&lt;code&gt;alert(foo === undefined); // true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在编程实践中，null几乎没用，根本不应该设计它。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;全局变量难以控制&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Javascript的全局变量，在所有模块中都是可见的；任何一个函数内部都可以生成全局变量，这大大加剧了程序的复杂性&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;自动插入行尾分号&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Javascript的所有语句，都必须以分号结尾。但是，如果你忘记加分号，解释器并不报错，而是为你自动加上分号。有时候，这会导致一些难以发现的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;加号运算符&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;+号作为运算符，有两个含义，可以表示数字与数字的和，也可以表示字符与字符的连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;alert(1+10); // 11&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alert(&amp;quot;1&amp;quot;+&amp;quot;10&amp;quot;); // 110&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果一个操作项是字符，另一个操作项是数字，则数字自动转化为字符。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alert(1+&amp;quot;10&amp;quot;); // 110&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alert(&amp;quot;10&amp;quot;+1); // 101&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样的设计，不必要地加剧了运算的复杂性，完全可以另行设置一个字符连接的运算符。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;NaN  NaN是一种数字，表示超出了解释器的极限。它有一些很奇怪的特性：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;NaN === NaN; //false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NaN !== NaN; //true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alert( 1 + NaN ); // NaN1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;与其设计NaN，不如解释器直接报错，反而有利于简化程序。&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;数组和对象的区分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;由于Javascript的数组也属于对象（object），所以要区分一个对象到底是不是数组，相当麻烦。Douglas Crockford的代码是这样的：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;== 和 ===&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;==用来判断两个值是否相等。当两个值类型不同时，会发生自动转换，得到的结果非常不符合直觉。&lt;/li&gt;
&lt;li&gt;因此，推荐任何时候都使用&amp;quot;===&amp;rdquo;（精确判断）比较符。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;基本类型的包装对象&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Javascript有三种基本数据类型：字符串、数字和布尔值。它们都有相应的建构函数，可以生成字符串对象、数字对象和布尔值对象。&lt;/li&gt;
&lt;li&gt;与基本数据类型对应的对象类型，作用很小，造成的混淆却很大。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;既然Javascript有缺陷，数量还不少，那么它是不是一种很糟糕的语言？有没有前途？
回答是Javascript并不算糟糕，相反它的编程能力很强大，前途很光明。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>css基础</title>
      <link>http://localhost:1313/post/css/</link>
      <pubDate>Thu, 30 Apr 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/css/</guid>
      
        <description>&lt;h1 id=&#34;css知识总结&#34;&gt;CSS知识总结&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;css基础&lt;/li&gt;
&lt;li&gt;css布局&lt;/li&gt;
&lt;li&gt;css定位&lt;/li&gt;
&lt;li&gt;css动画&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css的基础语法&#34;&gt;css的基础语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;css的层叠样式是什么&lt;/li&gt;
&lt;li&gt;可以多次对同一个选择器进行样式声明 课可以用不同选择器对同一个元素进行样式声明  可以用多个文件进行声明&lt;/li&gt;
&lt;li&gt;css是艺术 你要用感性的思维理解&lt;/li&gt;
&lt;li&gt;语法很简单&lt;/li&gt;
&lt;li&gt;语法1:样式语法  选择器{属性:属性值;}&lt;/li&gt;
&lt;li&gt;注意事项 所有符号都是英文符号 如果写错了 浏览器会警告 区分大小写 最后一个分号可以省略但是最后不要&lt;/li&gt;
&lt;li&gt;语法2: at语法&lt;/li&gt;
&lt;li&gt;@charset &amp;ldquo;UTF-8&amp;rdquo;; @import url(2.css);
@media (min-width: 100px) and (max-width: 200px)&lt;/li&gt;
&lt;li&gt;注意事项 @charset 必须放在第一行 前两个at必须以分号 结尾   charset是字符的意思  但UTF-8 是字符偏码&lt;/li&gt;
&lt;li&gt;如何调试css&lt;/li&gt;
&lt;li&gt;方法 使用vsCode Webstorm 看颜色 使用开发者工具看警告&lt;/li&gt;
&lt;li&gt;如何使用开发者工具 找到你脑中的标签 看它是否有选择器 看它的样式是否被划掉 看它是否有警&lt;/li&gt;
&lt;li&gt;Border调试法&lt;/li&gt;
&lt;li&gt;步骤  怀疑某个元素有问题 就给它加个border border没出现 说明选择器错了或语法错了 border出现了 看是不是符合预期  bug解决了就可以删掉  记住css的border调试法相当也js log&lt;/li&gt;
&lt;li&gt;新人的错误是 选择器拼错了 属性名拼错了  大小写错了 中文冒号 没加反花括号 没加单位&lt;/li&gt;
&lt;li&gt;CRM 学习方法 抄 运行 改&lt;/li&gt;
&lt;li&gt;理解文档流&lt;/li&gt;
&lt;li&gt;块 内联 内联块 两个盒子模型&lt;/li&gt;
&lt;li&gt;inline元素从左到右  到最右边才换行&lt;/li&gt;
&lt;li&gt;block元素从上到下 每一个另起一行&lt;/li&gt;
&lt;li&gt;inline-block也是ongoing左到右&lt;/li&gt;
&lt;li&gt;宽度&lt;/li&gt;
&lt;li&gt;liline宽度位内部niline元素的和 不能用width指定block默认自动计算宽度 可用width指定 inline-block 结合前两种&lt;/li&gt;
&lt;li&gt;高度&lt;/li&gt;
&lt;li&gt;inline高度有line-间接确定 跟height无关 block的高度右内部文档流元素觉得 可以设height  inline-block跟block 类似&lt;/li&gt;
&lt;li&gt;overflow溢出&lt;/li&gt;
&lt;li&gt;当内容大于容器&lt;/li&gt;
&lt;li&gt;可用overflow来设置是否显示滚动条&lt;/li&gt;
&lt;li&gt;auto是灵活设置 scroll是永远显示 hidden是直接溢出 visible是直接显示溢出 overflow分为overflow-x 和-y&lt;/li&gt;
&lt;li&gt;两种盒模型&lt;/li&gt;
&lt;li&gt;content-vox 内容盒 border-box是边框盒&lt;/li&gt;
&lt;li&gt;margin合拼&lt;/li&gt;
&lt;li&gt;父子margin 兄弟margin 合拼&lt;/li&gt;
&lt;li&gt;如何阻止合拼&lt;/li&gt;
&lt;li&gt;父子用padding/border挡住 overflow:hidden 挡住 display:flex,&lt;/li&gt;
&lt;li&gt;兄弟可用inline-block消除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css布局-两种&#34;&gt;css布局 两种&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;固定宽度布局  一般宽度位960 1000 1024px&lt;/li&gt;
&lt;li&gt;不固定宽度布局 主要靠文档流的原理来布局&lt;/li&gt;
&lt;li&gt;布局的两种思路&lt;/li&gt;
&lt;li&gt;从大到小 从小到大&lt;/li&gt;
&lt;li&gt;有什么布局 有float布局 flex布局 grid布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;css定位&#34;&gt;css定位&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;css定位和布局区别就大了 布局是屏幕平面上的 定位是垂直于平幕的&lt;/li&gt;
&lt;li&gt;一个div的分层 内联子元素 浮动文素 块级子元素 border background&lt;/li&gt;
&lt;li&gt;新属性 - position 有五个值&lt;/li&gt;
&lt;li&gt;static 默认值 relative 相对值 absolute 绝对值 fixed 固定值 sticky 粘滞定位&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;css的动画&#34;&gt;css的动画&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定义 由许多静止的画面(帧)以一定的速度连续播放 肉眼因视觉的残像生成错觉&lt;/li&gt;
&lt;li&gt;举个例子 将div从左往右移动 每过一段时间(setlnterval)将div移动以小段距离 直到目标地点&lt;/li&gt;
&lt;li&gt;用transform(变形)&lt;/li&gt;
&lt;li&gt;transform:translateX(0=&amp;gt;300px)&lt;/li&gt;
&lt;li&gt;直接修改会被合成 需要等一会修改 transition过度属性可以自动脑补中间帧&lt;/li&gt;
&lt;li&gt;比left性能好&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;css渲染原理&#34;&gt;css渲染原理&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;浏览器渲染过程&lt;/li&gt;
&lt;li&gt;根据HTML构建HTML树DOM&lt;/li&gt;
&lt;li&gt;根据css构建css树(CSSOM)&lt;/li&gt;
&lt;li&gt;将两颗树合成一颗树(render tree)&lt;/li&gt;
&lt;li&gt;Layout布局(文档流 盒模型 计算大小和位置)&lt;/li&gt;
&lt;li&gt;Paint绘制(把边框颜色 文字颜色 阴影等画出来)&lt;/li&gt;
&lt;li&gt;Compose合成(根据层叠关系展示画面)
(&lt;img src=&#34;https://ftp.bmp.ovh/imgs/2020/05/a53b6f36c9ab6216.png&#34; alt=&#34;&#34;&gt;)&lt;/li&gt;
&lt;li&gt;有三种更新方法&lt;/li&gt;
&lt;li&gt;js/css&amp;gt;样式&amp;gt;布局&amp;gt;绘制&amp;gt;合成&lt;/li&gt;
&lt;li&gt;js/css&amp;gt;样式&amp;gt;绘制&amp;gt;合成&lt;/li&gt;
&lt;li&gt;js/css&amp;gt;样式&amp;gt;合成&lt;/li&gt;
&lt;li&gt;第一种，全走 div.remove()会触发当前消失 ,其他的元素relayout 第二种跳过layout 改变背景颜色 直接repaint+composite 第三种 跳过lalyout和paint 改变transform 只需compsoite 注意要看全屏查看效果&lt;/li&gt;
&lt;li&gt;fransfoum的四个常用功能 位移translate 缩放 scale 旋转rotate 倾斜skew&lt;/li&gt;
&lt;li&gt;经验 一般都需要配合transition过度&lt;/li&gt;
&lt;li&gt;inline元素不支持transition 先变成block
&lt;img src=&#34;https://ftp.bmp.ovh/imgs/2020/05/8d4a018477123c51.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;如何更新样式&lt;/li&gt;
&lt;li&gt;一般我们用JS来更新&lt;/li&gt;
&lt;li&gt;比如div.style.background = &amp;lsquo;red&amp;rsquo;&lt;/li&gt;
&lt;li&gt;比如div.style.display =&#39;none&amp;rsquo;&lt;/li&gt;
&lt;li&gt;比如div.classList.add(&amp;lsquo;red&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;比如div.remove()直接删除节点&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>《浅析 URL》</title>
      <link>http://localhost:1313/post/url/</link>
      <pubDate>Thu, 30 Apr 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/url/</guid>
      
        <description>&lt;h1 id=&#34;url是什么&#34;&gt;URL是什么&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;协议+域名或IP+端口+路径+查询字符点+锚点&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是ip&#34;&gt;什么是IP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;只要你在互联网中 你就有至少一个IP&lt;/li&gt;
&lt;li&gt;IP分为内网和外网&lt;/li&gt;
&lt;li&gt;如何获取外网 你从电信租用宽带 在买个路由器  只要路由器连上电信的服务器 那么路由器就会有一个外网 比如14.17.32.211 这就是一个外网 就是你在互联网的地址&lt;/li&gt;
&lt;li&gt;内网就是你路由器在你家创建一个内网 这个IP是192.168.23.2 然后路由器会给你每一个内网中的设备分配一个不同的IP  如电脑192.168.1.11 手机是192.168，1.12&lt;/li&gt;
&lt;li&gt;路由器的功能&lt;/li&gt;
&lt;li&gt;现在路由器有两个IP 一个外网IP 一个内网IP 内网IP中的设备可以互相访问 但不能直接访问外网 内网设备想要访问外网 就必须经过路由器中转 外网设备想要把内容送到内网 就必须通过路由器 也就是说内网和外网就像两个隔绝的空间  无法互通 联通点就是路由器&lt;/li&gt;
&lt;li&gt;j个特殊的IP&lt;/li&gt;
&lt;li&gt;127.0.0.1  localhost 通过hosts指定为自己 0.0.0.0表示设备&lt;/li&gt;
&lt;li&gt;IP有了还需要什么 端口&lt;/li&gt;
&lt;li&gt;一台机器可以提供很多服务&lt;/li&gt;
&lt;li&gt;每个服务一个号码 这个号码叫做端口号 post&lt;/li&gt;
&lt;li&gt;一台机器可以提供不同的服务 要提供HTTP服务最好使用80端口 要提供HTTPS服务最好使用443端口 要提供FTP服务最好使用21端口  一共有65535个端口&lt;/li&gt;
&lt;li&gt;端口使用还有什么规则 0到1023 你只有拥有管理员权限后 才可以使用1024端口 比如http-server 默认使用8080端口 一个端口被占用了 你就只有使用别的端口&lt;/li&gt;
&lt;li&gt;域名是什么 qq.com  域名就是对IP的别称&lt;/li&gt;
&lt;li&gt;一个域名可以对应不同的IP 这个叫均衡负载 防止一台机器扛不住 一个IP可以对应不同的域名 这个叫共享主机&lt;/li&gt;
&lt;li&gt;域名和IP是怎么样对应的&lt;/li&gt;
&lt;li&gt;通过Chrome浏览器回向电信 联通 提供DNS的服务器 询问网址对应什么IP  电信 和联通会回答一个IP 然后Chrome才会想到对应IP 80/433端口 请求内容查看网址首页&lt;/li&gt;
&lt;li&gt;为什么是89或者443端口&lt;/li&gt;
&lt;li&gt;服务器默认的用80 提供http服务&lt;/li&gt;
&lt;li&gt;服务器默认的用443 提供https服务&lt;/li&gt;
&lt;li&gt;com是顶级域名 xiedaimala.com是二级域名 俗称一级域名  &lt;a href=&#34;http://www.xiedaimala.com&#34;&gt;www.xiedaimala.com&lt;/a&gt;是三级域名 俗称 二级域名&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://localhost:1313/post/html%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Mon, 27 Apr 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      
        <description>&lt;h1 id=&#34;a标签的用法&#34;&gt;a标签的用法&lt;/h1&gt;
&lt;p&gt;a 标签有四个属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a标签里面写上href 输入要跳转网页的地址 点击地址来访问网页 href的取值 网站https://baidu.com &lt;a href=&#34;http://baidu.com&#34;&gt;http://baidu.com&lt;/a&gt; //baidu.com  路径/a/b/c 以及a/b/c index.html 以及./index.html  伪协议 javascript:代码;  mailto:邮箱  tel:手机号  id hred=#xxx&lt;/li&gt;
&lt;li&gt;a标签里面写上target 的作用是指定那个窗口打开网页  target的取值内置名字_blank _top _parent _self   程序员的命名  window的name  iframe 的name   iframe标签内嵌窗口很少用 只有老系统在用&lt;/li&gt;
&lt;li&gt;a标签里面写上download 理论上可以下载 但是现在不行 问题不是所有的浏览器都支持 尤其是手机&lt;/li&gt;
&lt;li&gt;a标签里面写上rel=noopener&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;img标签-图片&#34;&gt;img标签 图片&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作用 发出get 请求,展示一张图片&lt;/li&gt;
&lt;li&gt;属性 all/height/width/src&lt;/li&gt;
&lt;li&gt;事件  onload/onerror&lt;/li&gt;
&lt;li&gt;相应式 max-width:100%&lt;/li&gt;
&lt;li&gt;可替换的元素请看MDN&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用的表章节的标签有哪些&#34;&gt;常用的表章节的标签有哪些&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;h1~h6 是标题标签&lt;/li&gt;
&lt;li&gt;section 是章 节的意思&lt;/li&gt;
&lt;li&gt;article 一片文章的意思&lt;/li&gt;
&lt;li&gt;main 主要的意思&lt;/li&gt;
&lt;li&gt;aside 旁边的意思&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;table-标签-表格&#34;&gt;table 标签 表格&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;相关的标签有table thead tbody tfoot tr td th&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相关的样式 table-layout  border-collapse borber-spacing&lt;/p&gt;
&lt;h5 id=&#34;form-标签-表格&#34;&gt;form 标签 表格&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;作用发出get或post请求&lt;/li&gt;
&lt;li&gt;属性 action/autocomp&lt;/li&gt;
&lt;li&gt;事件 onsubmit&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;input-标签&#34;&gt;input 标签&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;作用 让用户输入内容&lt;/li&gt;
&lt;li&gt;属性 type: button/checkbox/email/file/hidden/numberpassword/radio/search/submit/tel/textmaxlength/pattern/value/placeholder&lt;/li&gt;
&lt;li&gt;事件 onchange /onfocus/onblur&lt;/li&gt;
&lt;li&gt;其他的输入标签 select+option textarea labei  注意事项一般不监听input的click 事件 form 里面的input要有name  form里面放一个type=submit才能触发submit事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://localhost:1313/post/%E6%88%91%E7%9A%84%E7%AC%AC2%E5%BC%A0%E5%8D%9A%E5%AE%A2-/</link>
      <pubDate>Sun, 26 Apr 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%88%91%E7%9A%84%E7%AC%AC2%E5%BC%A0%E5%8D%9A%E5%AE%A2-/</guid>
      
        <description>&lt;h1 id=&#34;大家好&#34;&gt;大家好&lt;/h1&gt;
&lt;p&gt;今天又是开心的一天
我又回来了&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>博客搭建</title>
      <link>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 25 Apr 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>&lt;h1 id=&#34;如何用-hugo-搭建个人博课&#34;&gt;如何用 hugo 搭建个人博课&lt;/h1&gt;
&lt;p&gt;Hugo 是Go语言实现的一个博客生成器 世界上最快的博客生成器&lt;/p&gt;
&lt;h2 id=&#34;安装hugo&#34;&gt;安装Hugo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;官网教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Window安装方法&lt;/li&gt;
&lt;li&gt;去&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo releases&lt;/a&gt; 网页下载http://hugo_xxx_windows-64bit.zip/&lt;/li&gt;
&lt;li&gt;解压,把hugo.exe放到D:\Software\hugo\hugo.exe&lt;/li&gt;
&lt;li&gt;把D:\Software\hugo\加到PATH&lt;/li&gt;
&lt;li&gt;重启终端,运行hugo version查看版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快速搭建出博客&#34;&gt;快速搭建出博客&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进入&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;官方, 点击Quick Start快速开始&lt;/li&gt;
&lt;li&gt;从Step2 开始抄代码, 直到Step 7&lt;/li&gt;
&lt;li&gt;得到一个public的目录,这就是我们的博客站点&lt;/li&gt;
&lt;li&gt;hugo server-D 可以预览草稿&lt;/li&gt;
&lt;li&gt;hugo server 可以预览草稿&lt;/li&gt;
&lt;li&gt;预览网站&lt;/li&gt;
&lt;li&gt;双击打开public/index.html 发现不能预览&lt;/li&gt;
&lt;li&gt;因为public/index.html不能使用文件协议预览&lt;/li&gt;
&lt;li&gt;请使用hugo server 预览&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://localhost:1313/post/html/</link>
      <pubDate>Sat, 25 Apr 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html/</guid>
      
        <description>&lt;h1 id=&#34;html入门1&#34;&gt;HTML入门1&lt;/h1&gt;
&lt;p&gt;HTML之父  是Tim Benrnes-lee, 我称为李爵士
他自己写了第一个浏览器 第一个服务器 用自己写的浏览器访问的自己的服务器 发明了www，同时发明了HTML HTTP 和URL 为了让我们能上网买东西&lt;/p&gt;
&lt;h2 id=&#34;html的起手式是什么&#34;&gt;HTML的起手式是什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;!DOCTYPE html  文档类型&lt;/li&gt;
&lt;li&gt;html lang=&amp;quot;en&amp;rdquo;  html标签可以把 en 改为zh-CN&lt;/li&gt;
&lt;li&gt;meta charset=&amp;quot;UTF-8&amp;rdquo; 是国际编程语言&lt;/li&gt;
&lt;li&gt;meta name=&amp;quot;viewport&amp;rdquo; content=&amp;quot;width=device-width, initial-scale=1.0&amp;rdquo; 这个的手机适配&lt;/li&gt;
&lt;li&gt;title 这个的标题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用的表章节的标签有哪些&#34;&gt;常用的表章节的标签有哪些&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;h1~h6 是标题标签&lt;/li&gt;
&lt;li&gt;section 是章 节的意思&lt;/li&gt;
&lt;li&gt;article 一片文章的意思&lt;/li&gt;
&lt;li&gt;main 主要的意思&lt;/li&gt;
&lt;li&gt;aside 旁边的意思&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;全局属性有哪些&#34;&gt;全局属性有哪些&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;class contenteditable hidden id style tabindex title
&lt;h5 id=&#34;常用的内容标签有哪些分别是什么意思&#34;&gt;常用的内容标签有哪些，分别是什么意思&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;heading 标题 drder  顺序&lt;/li&gt;
&lt;li&gt;body 身体    ordered 有顺序&lt;/li&gt;
&lt;li&gt;paragraph 段落 unordered 无顺序&lt;/li&gt;
&lt;li&gt;section 章，节 description 描述&lt;/li&gt;
&lt;li&gt;artcle 一篇文章 term 术语&lt;/li&gt;
&lt;li&gt;main 主要 data  数据&lt;/li&gt;
&lt;li&gt;aside 旁边  quote 引用&lt;/li&gt;
&lt;li&gt;anchor 定点  block  块&lt;/li&gt;
&lt;li&gt;strong 重要   lnline 行内&lt;/li&gt;
&lt;li&gt;emphasis 强调  break 打断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://localhost:1313/post/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Sat, 25 Apr 2020 14:01:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      
        <description>&lt;h1 id=&#34;大家好&#34;&gt;大家好&lt;/h1&gt;
&lt;p&gt;我的博客开通了&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
